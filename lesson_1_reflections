Question: How did viewing a diff between two versions of a file help you see the bug that was introduced?

Answer: Essential is, that the original code was bug-free. So any bug that is present in the new code must have been introduced when the code was changed. Therefore, automatically comparing the two codes yields only that sub-quantity of code that contains the bug. Therefore a much smaller quantity of code needed to be inspected.

It is furthermore essential that the output of the diff action is relatively small. In other words: the changes must be a small portion of the overall code. In other words: it is necessary to have a relatively recent 'old' version from which the 'new' version does not differ substantially.

Question: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Answer: You may encounter similar challenges at a later date. Having - at that later date - the history of a certain train of throught developing available will make it much faster to re-develop that train of thought.

Question: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Google docs is not project-related. It is more oriented towards single documents. Git has been designed for coding specifically. In this case it is more likely that one is dealing with multi-file projects where code-changes in one document will require commensurate changes in another.

Question: How can you use the commands git log and git diff to view the history of files?

Answer: Using git log one can list the most recent commits. By inspecting the comments made to the individual commits, one can understand how the file was changed recently.

Git diff then allows one to inspect the implementation of those changes in more detail.

Question: How might using version control make you more confident to make changes that could break something?

Answer: Once you know that you can always get back to a previous working version, there is not that much threat of an irreversible mistake any more.

Question: Now that you have your workspace set up, what do you want to try using Git for?

Answer: Obviously, I'll use Git for all programming projects from now on.
